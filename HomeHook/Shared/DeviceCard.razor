@if (IsLoading)
{
    <BusyCover />
}
else
{
    <div class="card bg-dark text-white card-receiver m-2" @ref="CardReference" style="@(Media == null ? "height: 250px;" : string.Empty)">
        @if (Media != null)
        {
            <img src="@Media?.Metadata.ThumbnailUri" class="card-img" onerror="if (this.src != 'error.jpg') this.src = 'https://semantic-ui.com/images/wireframe/image.png';">
        }
        <div class="card-img-overlay">

            <div class="row m-0 receiver-title position-absolute fixed-top w-100">
                <h4 class="col text-truncate text-stroke m-2 p-0">@Device.Name</h4>
                <h6 class="col d-flex align-items-center justify-content-center card-title text-truncate text-stroke m-2 p-0">@Device.DeviceStatus</h6>
                <i class="col d-flex align-items-center button-bright hover-connect justify-content-end m-2 p-0 mdi mdi-@(GetIcon(Media?.MediaItemKind))" @onclick="LaunchQueue"></i>
            </div>

            <div class="media-information p-2">
                <h5 class="text-truncate text-stroke m-1">@(Device.StatusMessage ?? Media?.Metadata.Title)</h5>
                <p class="text-truncate text-stroke m-1">@(Device.StatusMessage == null ? Media?.Metadata.Subtitle : string.Empty)</p>
            </div>

            <div class="bottom-container container-fluid position-absolute fixed-bottom p-0 w-100">
                <div class="media-controls p-0 w-100">
                    @if (Media != null)
                    {
                        <div class="row flex-nowrap align-items-center mx-0 pt-3 pb-2">
                            <div class="col-auto text-white ps-3 pe-2">@TimeSpan.FromSeconds(Device.CurrentTime).ToString(Media.Runtime >= 3600 ? @"h\:mm\:ss" : @"mm\:ss")</div>
                            <div class="progress col px-0 button-bright progress-container" @ref=ProgressBar @onclick="SeekClick">
                                <div class="progress-bar" role="progressbar" aria-valuenow="@Device.CurrentTime" aria-valuemin="0" aria-valuemax="@Device.CurrentTime" style="width:@(Math.Round(@Device.CurrentTime * 100 / Media.Runtime))%;"></div>
                            </div>
                            <div class="col-auto text-white ps-2 pe-3">@TimeSpan.FromSeconds(Media.Runtime).ToString(Media.Runtime >= 3600 ? @"h\:mm\:ss" : @"mm\:ss")</div>
                        </div>
                        <div class="row flex-nowrap align-items-center mx-0 pt-2 pb-3">
                            <i class="col-auto position-relative ps-3 pe-2 button-bright mdi mdi-skip-previous icon-responsive" @onclick="PreviousClick" />
                            <i class="col-auto position-relative px-2 button-bright mdi mdi-rewind-10 icon-responsive" @onclick="RewindClick" />
                            <i class="col-auto position-relative px-2 button-bright mdi mdi-@(Device.DeviceStatus == DeviceStatus.Playing ? "pause" : "play") icon-responsive" @onclick="PlayPauseClick" />
                            <i class="col-auto position-relative px-2 button-bright mdi mdi-stop icon-responsive" @onclick="StopClick" />
                            <i class="col-auto position-relative px-2 button-bright mdi mdi-fast-forward-10 icon-responsive" @onclick="FastForwardClick" />
                            <i class="col-auto position-relative px-2 button-bright mdi mdi-skip-next icon-responsive" @onclick="NextClick" />
                            <div class="col px-0" />
                            <div class="col-auto position-relative d-flex align-items-center px-2">
                                <input class="invisible-toggle radial-toggle" type="checkbox" id="speedToggle@(Device.Name)" />
                                <label class="radial-menu m-0" for="speedToggle@(Device.Name)">
                                    <div class="radial-button position-relative">
                                        <i class="button-bright menu-button mdi mdi-play-speed icon-responsive"></i>
                                        <i class="button-bright close-button mdi mdi-close icon-responsive"></i>
                                    </div>
                                    <div class="radial-button@(Device.PlaybackRate == 0.5 ? " button-disabled" : string.Empty )" @onclick="async () => await SetPlaybackRate(0.5)">
                                        <span class="button-bright d-flex align-content-center icon-responsive">½</span>
                                    </div>
                                    <div class="radial-button@(Device.PlaybackRate == 1 ? " button-disabled" : string.Empty )" @onclick="async () => await SetPlaybackRate(1)">
                                        <span class="button-bright d-flex align-content-center icon-responsive">1</span>
                                    </div>
                                    <div class="radial-button@(Device.PlaybackRate == 1.5 ? " button-disabled" : string.Empty )" @onclick="async () => await SetPlaybackRate(1.5)">
                                        <span class="button-bright d-flex align-content-center icon-responsive">3⁄2</span>
                                    </div>
                                    <div class="radial-button@(Device.PlaybackRate == 2 ? " button-disabled" : string.Empty )" @onclick="async () => await SetPlaybackRate(2)">
                                        <span class="button-bright d-flex align-content-center icon-responsive">2</span>
                                    </div>
                                </label>
                            </div>
                            @if (Device.MediaQueue.Any())
                            {
                                <div class="col-auto position-relative px-2 d-flex align-items-center">
                                    <input class="invisible-toggle radial-toggle" type="checkbox" id="playlistToggle@(Device.Name)" />
                                    <label class="radial-menu m-0" for="playlistToggle@(Device.Name)">
                                        <div class="radial-button position-relative">
                                            <i class="button-bright menu-button mdi mdi-playlist-edit icon-responsive" @onclick="ToggleEditingQueue"></i>
                                            <i class="button-bright close-button mdi mdi-close icon-responsive" @onclick="ToggleEditingQueue"></i>
                                        </div>
                                    </label>
                                </div>
                                <div class="col-auto position-relative px-2 d-flex align-items-center">
                                    <input class="invisible-toggle radial-toggle" type="checkbox" id="repeatToggle@(Device.Name)" />
                                    <label class="radial-menu m-0" for="repeatToggle@(Device.Name)">
                                        <div class="radial-button position-relative">
                                            <i class="button-bright menu-button mdi mdi-@(Device.RepeatMode == RepeatMode.All ? "repeat" : Device.RepeatMode == RepeatMode.One ? "repeat-once" : Device.RepeatMode == RepeatMode.Shuffle ? "shuffle-variant" : "repeat-off") icon-responsive"></i>
                                            <i class="button-bright close-button mdi mdi-close icon-responsive"></i>
                                        </div>
                                        <div class="radial-button@(Device.RepeatMode == RepeatMode.All ? " button-disabled" : string.Empty )" @onclick="async () => await SetRepeatMode(RepeatMode.All)">
                                            <i class="button-bright d-flex align-content-center mdi mdi-repeat icon-responsive"></i>
                                        </div>
                                        <div class="radial-button@(Device.RepeatMode == RepeatMode.One ? " button-disabled" : string.Empty )" @onclick="async () => await SetRepeatMode(RepeatMode.One)">
                                            <i class="button-bright d-flex align-content-center mdi mdi-repeat-once icon-responsive"></i>
                                        </div>
                                        <div class="radial-button@(Device.RepeatMode == RepeatMode.Shuffle ? " button-disabled" : string.Empty )" @onclick="async () => await SetRepeatMode(RepeatMode.Shuffle)">
                                            <i class="button-bright d-flex align-content-center mdi mdi-shuffle-variant icon-responsive"></i>
                                        </div>
                                        <div class="radial-button@(Device.RepeatMode == RepeatMode.Off ? " button-disabled" : string.Empty )" @onclick="async () => await SetRepeatMode(RepeatMode.Off)">
                                            <i class="button-bright d-flex align-content-center mdi mdi-repeat-off icon-responsive"></i>
                                        </div>
                                    </label>
                                </div>
                            }

                            <div class="col-auto position-relative ps-2 pe-3 d-flex align-items-center">
                                <input class="invisible-toggle radial-toggle" type="checkbox" id="volumeToggle@(Device.Name)" />
                                <label class="radial-menu m-0" for="volumeToggle@(Device.Name)">
                                    <div class="radial-button position-relative">
                                        <i class="volume-icon menu-button button-bright mdi mdi-@(Device.IsMuted ? "volume-variant-off" : Device.Volume > 0.5 ? "volume-high" : Device.Volume > 0 ? "volume-medium" : "volume-low") icon-responsive"></i>
                                        <i class="button-bright close-button mdi mdi-close icon-responsive"></i>
                                    </div>
                                </label>
                                <div class="volume-container d-flex justify-content-center">
                                    <i class="volume-button button-bright mdi mdi-@(Device.IsMuted ? "volume-variant-off" : Device.Volume > 0.5 ? "volume-high" : Device.Volume > 0 ? "volume-medium" : "volume-low") icon-responsive" @onclick="ToggleMute" />
                                    <input class="volume-slider button-bright" type="range" orient="vertical" min="0" max="1" step="0.01" value="@Device.Volume" @onchange="SetVolume" />
                                </div>
                            </div>
                        </div>
                    }
                </div>
                @{ 
                    // TODO: Hook up buttons to commands
                    // TODO: change area of effect when clicking for collapse or selection
                    // TODO: add scrollbar for media queue.
                }
                <div class="queue-edit-container bg-dark p-2 w-100">
                    <div class="btn-group btn-group-sm m-2 mb-3 float-left" role="group" aria-label="Queue item buttons.">
                        <button id="@(Device.Name)QueuePlayButton" class="btn btn-secondary" disabled><i class="mdi mdi-playlist-play"></i></button>
                        <button id="@(Device.Name)QueuePlusButton" class="btn btn-secondary"><i class="mdi mdi-playlist-plus"></i></button>
                        <button id="@(Device.Name)QueueMinusButton" class="btn btn-secondary" disabled><i class="mdi mdi-playlist-minus"></i></button>
                        <button id="@(Device.Name)QueueUpButton" class="btn btn-secondary" disabled><i class="mdi mdi-chevron-up"></i></button>
                        <button id="@(Device.Name)QueueDownButton" class="btn btn-secondary" disabled><i class="mdi mdi-chevron-down"></i></button>
                    </div>
                    <div class="list-group list-group-flush bg-transparent">
                        @foreach(MediaItem mediaItem in Device.MediaQueue)
                        {
                            <button class="media-item list-group-item list-group-item-action @(Media?.Id == mediaItem.Id ? "active" : string.Empty) bg-transparent" aria-current="@(Media.Id == mediaItem.Id)">
                                @if (Media.Id == mediaItem.Id)
                                {
                                    <div id="bars">
                                    @foreach(string barStyle in BarStyles)
                                    {                                        
                                        <div class="bar" style="@barStyle" />
                                    }
                                    </div>
                                }
                                <div class="d-flex justify-content-between align-items-center">
                                    <button class="btn btn-collapse rounded p-0 text-white text-start text-truncate mw-100 collapsed" data-bs-toggle="collapse" data-bs-target="#collapse@(mediaItem.Id)" aria-expanded="false">
                                        <i class="mdi mdi-chevron-right"></i>
                                        <span>@($"{mediaItem.Metadata.Title}")</span>
                                    </button>
                                    <input class="form-check-input ms-1" type="checkbox" value="" id="firstCheckbox">
                                </div>
                                <div class="collapse" id="collapse@(mediaItem.Id)">
                                    @if (mediaItem.Metadata.Subtitle != null)
                                    {
                                        <small class="text-white text-start text-truncate mw-100">@($"{mediaItem.Metadata.Subtitle}")</small>
                                    }
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-white text-start text-truncate mw-100"><i class="mdi mdi-@(GetIcon(mediaItem.MediaItemKind)) m-1"></i>@TimeSpan.FromSeconds(mediaItem.Runtime).ToString(Media.Runtime >= 3600 ? @"h\:mm\:ss" : @"mm\:ss")</small>
                                        @if (mediaItem.Metadata.CreationDate != null)
                                        {
                                            <small class="text-white text-start text-truncate mw-100">@($"{mediaItem.Metadata.CreationDate}")</small>
                                        }
                                    </div>

                                </div>
                            </button>
                        }
                    </div>
                </div>
                }
            </div>
        </div> 
    </div>
}